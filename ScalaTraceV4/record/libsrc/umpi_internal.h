/* -*- Mode: C; -*- */
/* Creator: Jeffrey Vetter (vetter3@llnl.gov) Tue Mar 14 2000 */
/* $Header: /home/cvs/cvs/xwu3/ScalaTraceV2/record/libsrc/umpi_internal.h,v 1.1 2012/04/02 05:12:09 xwu3 Exp $ */
/* umpi_internal.h -- internal header */

/* BRONIS: reorganized into header that "glues" it all together... */

#ifndef _UMPIRE_INTERNAL_H
#define _UMPIRE_INTERNAL_H


/* mike's headers for binary packaging of ops and stack walk */
#include <sys/time.h>
#include <time.h>

/* uncomment to eliminate chksum computation (machinery remains) */
#define UMPI_NOCHKSUM
/*
*/

/* uncomment to use a single error/report file for outfielder */
/* (asynchronous local) and synchronous local processing
#define UMPI_COMBINED_LOCAL_FILES
*/
/*
*/

/* uncomment for shared memory/single node version */
#define UMPI_SHARED_MEM_ONLY
/* uncomment for MPI-only version...
#define UMPI_MPI_ONLY
*/
/* uncomment for IP/sockets-only version (not fully completed)
#define UMPI_IP_ONLY
*/
/* uncomment for MPI version with IP-panic mode
#define UMPI_MPI_IP_PANIC
*/
/*
*/


/* use macros with minimal error checking... */
#define UMPI_HAND_INLINING

/* Level 0 Debug - dump op queues/trees on error or exit */
/* uncomment for Level 0 debugging information */
#define UMPI_DEBUG_LEVEL_0
/*
*/

/* Level 1 Debug - Level 0 plus print msg for every op processed */
/*                 and be paranoid about combining type_array entries... */
/* uncomment for Level 1 debugging information */
/*
#define UMPI_DEBUG_LEVEL_1
*/

/* Level 2 Debug - Level 1 plus use history queues for all ops and */
/*                 dump those queues on error or exit */
/* uncomment for Level 2 debugging information */
/*
#define UMPI_DEBUG_LEVEL_2
*/

#ifdef UMPI_DEBUG_LEVEL_2
#ifndef UMPI_DEBUG_LEVEL_1

#define UMPI_DEBUG_LEVEL_1

#endif
#endif

#ifdef UMPI_DEBUG_LEVEL_1
#ifndef UMPI_DEBUG_LEVEL_0

#define UMPI_DEBUG_LEVEL_0

#endif
#endif

#ifndef UMPI_DEBUG_LEVEL_0

#ifndef UMPI_HAND_INLINING
#define UMPI_HAND_INLINING
#endif

#endif


/* standard headers to include... */
#include <assert.h>
//#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
//#include <sys/ipc.h>
//#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <setjmp.h>
#include <search.h>
#include <mpi.h>
//#include <pthread.h>

#if defined (UMPI_IP_ONLY) || defined (UMPI_MPI_IP_PANIC)

#include <sys/socket.h>
#include <sys/un.h>
#include <signal.h>

#endif

/* generic headers, implemented in this source tree */
#ifdef UMPI_HAND_INLINING

#include "umpi_inlined.h"

#endif

#include "queue.h"
#include "table.h"
//#include "vtypes.h"


/* headers generated by wrapper-generator with data structures */
/* used in _mgr_op and _local_op structs ... */
#include "umpi_mpi_params.h"


/* headers with _mgr_op and _local_op structs... */
#include "umpi_mgr.h"
#include "umpi_outfielder.h"


/* header with _umpi_matching_op struct; needed for umpi_mpi.h... */
#include "umpi_mpi_match.h"


/* headers generated by wrapper-generator... */
#include "umpi_mpi.h"
#include "umpi_mpi_copy_ops.h"
#include "umpi_mpi_free_ops.h"
//#include "umpi_mpi_mgr_verify.h"
//#include "umpi_mpi_outfielder_verify.h"
#include "umpi_mpi_pack_ops.h"
#include "umpi_mpi_print_ops.h"
#include "umpi_mpi_unpack_ops.h"
#include "umpi_mpi_replay_ops.h"


/* header with _umpi_op_collector_t struct; needed for umpi_mpi_comms.h... */
//#include "umpi_collector.h"

/* headers mostly specific to corresponding *.c file... */
//#include "umpi_mpi_chksum.h"
//#include "umpi_mpi_comms.h"
//#include "umpi_mpi_req.h"
//#include "umpi_mpi_deadlock.h"
//#include "umpi_mpi_resources.h"
//#include "umpi_mpi_search_ops.h"
//#include "umpi_mpi_typemap.h"
//#include "umpi_mpi_typematch.h"
//#include "protos.h"            /* util.c stuff; much no longer used... */


/* header with error number definitions... */
#include "umpi_errno.h"

#ifdef __cplusplus
extern "C" {
#endif

/* definitions needed for different communication mechanisms... */
/* plus a few globals used in both outfielders and mgr... */
#if defined (UMPI_IP_ONLY) || defined (UMPI_MPI_IP_PANIC)

#define UMPI_MGRSTR_PATH "./s.mgrstr"

#define UMPI_HEARTBEAT_INTERVAL 100000 /* 0.1 seconds... */
#define UMPI_HEARTBEAT_INTERVAL_SECONDS 10 /* 10 seconds... */
#define UMPI_PANIC_COUNT           100 /* 10 seconds... */
#define UMPI_MAX_HEARTBEATS         10
#define UMPI_MAX_CONNECTS           10

#endif

#ifndef UMPI_SHARED_MEM_ONLY

extern MPI_Comm UMPI_COMM_WORLD;

#endif

/*
#define UMPI_MAX_MSG_BYTES    1024  
*/ /* 1KB for this try... */

/* 
#define UMPI_MAX_MSG_BYTES    2048
*/ /* 2KB for this try... */

/* 
#define UMPI_MAX_MSG_BYTES    2560
*/ /* 2.5KB for this try... */

/* */ 
#define UMPI_MAX_MSG_BYTES    3072
/* 3KB for this try... */

/* 
#define UMPI_MAX_MSG_BYTES    3584
*/ /* 3.5KB for this try... */

/* 
#define UMPI_MAX_MSG_BYTES    4096
*/ /* 4KB for this try... */

/* 
#define UMPI_MAX_MSG_BYTES    6144
*/ /* 6KB for this try... */

/* 
#define UMPI_MAX_MSG_BYTES    8192
*/ /* 8KB for this try... */

/* 
#define UMPI_MAX_MSG_BYTES    16384
*/ /* 16KB for this try... */

/* 
#define UMPI_MAX_MSG_BYTES    24576
*/ /* 24KB for this try... */

/* 
#define UMPI_MAX_MSG_BYTES    32768
*/ /* 32KB for this try... */

/* 
#define UMPI_MAX_MSG_BYTES    49152
*/ /* 48KB for this try... */

/*
#define UMPI_MAX_MSG_BYTES    65536 
*/ /* 64KB for first try... */

/* 
#define UMPI_MAX_MSG_BYTES    1048576
*/ /* 1MB for last try... */

#if defined (UMPI_MPI_ONLY) || defined (UMPI_MPI_IP_PANIC)

#define UMPI_OP_TAG           73642
#define UMPI_OVERSIZED_OP_TAG 84385

#endif

#ifdef UMPI_MPI_IP_PANIC

#define UMPI_PANIC_TAG    87346

extern MPI_Comm UMPI_PANIC_COMM;

#endif

#ifndef UMPI_MPI_ONLY

/*
#define TASK_QUEUE_SIZE   300
*/

#define TASK_QUEUE_SIZE   3000

#define TOCLIENT 1
#define TOSERVER -1
#define EMPTY 0

#ifdef UMPI_SHARED_MEM_ONLY

#define NBUFF 4
#define SHMKEY ((key_t) 7890)
#define SEMKEY1 ((key_t) 7981)
#define SEMKEY2 ((key_t) 7892)

#define PERMS 0666

extern int shmid;

typedef struct _Mesg_t
{
  int lock;
  int res;
  char packed_op[UMPI_MAX_MSG_BYTES];
}
Mesg;

#else

typedef struct _Mesg_t
{
  int lock;
  int res;
  umpi_op_t *op;
}
Mesg;

#endif

extern Mesg *mesgptr;

#endif


/* general definitions... */
#define UMPI_MGR_RANK              0       
#define umpi_preop                 6779473 
#define umpi_postop                1013048 
#define UMPI_START_PACKED_OP       8532985
#define UMPI_END_PACKED_OP         5329872
#define UMPI_START_SPLIT_PACKED_OP 8780545
#define UMPI_END_SPLIT_PACKED_OP   7659839


/* general globals... */
extern umpi_mpi_lookup_t umpi_mpi_lookup[];


/* general prototypes (NEED A umpi_util.h file?) */ 
extern umpi_op_t *_copy_uop (umpi_op_t *op);


#ifndef UMPI_HAND_INLINING
extern umpi_mpi_lookup_t *get_struct_by_opcode (int opcode);
#else
extern Q_t *munge_q;
extern Q_ele_t *munge_ele;
extern umpi_table_t *munge_t;
extern umpi_table_column_t *munge_col;
#endif


int free_op (umpi_op_t *op);
void umpi_get_handles_and_count (umpi_op_t *p, int *count, MPI_Request **handles);
int umpi_get_handle_index (umpi_op_t *start_p, MPI_Request handle);
umpi_matching_op_t *umpi_clean_up_startall_m_op (umpi_op_t *req_p, 
						 umpi_op_t *create_op);
void q_close_op_q (Q_t *the_q, int location);
void q_close_match_op_q (Q_t *the_q, int location);
void q_close_deadlock_q (Q_t *the_q, int location);
void q_close_op_history_q (Q_t *the_q, int location);


/* best in a a umpi_util.h file? separate umpi_ref_count.h? */
/* macro definitions used as umpi_dec_ref_count locations... */
#define UMPI_NULL_LOCATION      0
#define UMPI_GLOBAL_OP          1
#define UMPI_TASK_SYNCHRONOUS   2
#define UMPI_TASK_ASYNCHRONOUS  3


#ifndef UMPI_HAND_INLINING
int umpi_set_ref_count (umpi_op_t *op, int value);
int umpi_get_ref_count (umpi_op_t *op);
int umpi_inc_ref_count (umpi_op_t *op);
#endif


#if ((defined (UMPI_DEBUG_LEVEL_2)) || (!(defined (UMPI_HAND_INLINING))))
umpi_op_t *umpi_dec_ref_count (umpi_op_t *op, int location);
#endif


#define Abort(str) {_Abort(__FILE__,__LINE__, (str));}
void _Abort (char *i_file, int i_line, char *i_msg);


#ifdef __cplusplus
}
#endif 

#endif /* _UMPIRE_INTERNAL_H */
/* EOF */
