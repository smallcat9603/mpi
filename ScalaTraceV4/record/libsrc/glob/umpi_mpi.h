/* Umpire lookup table struct header file */

/* !!!!! This file is automatically generated by a wrapper-engine !!!!! */



#ifndef _UMPI_MPI_H
#define _UMPI_MPI_H


#include"umpi_mpi_ops.h"
typedef struct _umpi_mpi_lookup_t
{
char * name;
int id;
	int MPI2_function;
	int any_completion;
	int asynchronous;
	int bsend;
	int candeadlock;
	int collective;
	int comm_constructor;
	int completion;
	int group_constructor;
	int multiple_requests;
	int noasynchglobalpost;
	int noasynchglobalpre;
	int noasynchlocalpost;
	int noasynchlocalpre;
	int noasynchpost;
	int noasynchpre;
	int nolocalpost;
	int nolocalpre;
	int nonblocking;
	int nopost;
	int nopre;
	int nowrapper;
	int partial_completion;
	int persistent_init;
	int persistent_start;
	int posix_function;
	int recv;
	int request_free;
	int resource_constructor;
	int resource_destructor;
	int send;
	int sendrecv;
	int some_completion;
	int synchronous_collective;
	int test_completion;
	int type_constructor;

int (*vcode_g_pre)(umpi_op_t * op);
int (*vcode_g_post)(umpi_op_t * op);

int (*vcode_l_pre)(umpi_op_t * op);
int (*vcode_l_post)(umpi_op_t * op);
void (*print_op)(umpi_op_t * op, char *buf);
int (*pack_op)(umpi_op_t * op, char *buf, int maxlen);
int (*pack_op_size)(umpi_op_t * op);
int (*unpack_op)(umpi_op_t * op, char *buf);
void (*free_op)(umpi_op_t * op);
void (*copy_op)(umpi_op_t * op, umpi_op_t * newop);
int (*type_match_check)(umpi_matching_op_t * m_op1, umpi_matching_op_t * m_op2, int retain_type_res);
int (*local_collective_type_check)(umpi_op_t * op, int lrank);
int (*collective_type_res)(umpi_op_t * op, umpi_matching_op_t * m_op);
void (*replay_op)(void * node);

} umpi_mpi_lookup_t;

#define UMPI_BASE_OPCODE 1000
#define UMPI_OPCODE_COUNT 212

#endif

/*eof*/
