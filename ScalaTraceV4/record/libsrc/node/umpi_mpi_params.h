/* Parameter header file */

/* !!!!! Automatically generated by wrapper generator !!!!! */

#include <mpi.h>

typedef int MPI_Handle_type;
typedef int MPI_Handle_enum;

#ifndef _UMPI_mpi_PARAM_H
#define _UMPI_mpi_PARAM_H 1



typedef struct _umpi_mpi_param {
	int addrcount;
	MPI_Aint address;
	int amode;
	int argc;
	char** argv;
	int* array_of_blocklens;
	int* array_of_coords;
	int* array_of_dargs;
	int* array_of_degrees;
	int* array_of_dims;
	int* array_of_displacements;
	int* array_of_distribs;
	int* array_of_gsizes;
	int* array_of_indices;
	int* array_of_int_displacements;
	int* array_of_integers;
	int* array_of_neighbors;
	int* array_of_periods;
	int* array_of_psizes;
	int* array_of_ranks;
	int* array_of_ranks2;
	MPI_Request* array_of_requests;
	int* array_of_sizes;
	int* array_of_starts;
	MPI_Status* array_of_statuses;
	int* array_of_subsizes;
	int blocklen;
	int blocklength;
	void* buf;
	void* buffer;
	void* bufptr;
	MPI_Handle_type c_handle;
	MPI_Request c_request;
	MPI_Status c_status;
	int cart_dest;
	int cart_src;
	int cmd;
	int color;
	int combiner;
	MPI_Comm comm;
	MPI_Comm comm1;
	MPI_Comm comm2;
	MPI_Comm comm_out;
	int commute;
	void* copy_function;
	int count;
	int countp;
	int* counts;
	char* datarep;
	MPI_Datatype datatype;
	void* delete_function;
	int dest;
	int* dimsp;
	int direction;
	MPI_Offset disp;
	int displ;
	MPI_Aint displacement;
	int* displs;
	int dtypecount;
	int edgecount;
	int edgecountp;
	int* edges;
	int elements;
	MPI_Errhandler errhandler;
	int errorclass;
	int errorcode;
	MPI_Datatype etype;
	MPI_Aint extent;
	void* extra_state;
	MPI_Fint f_handle;
	MPI_Fint f_status;
	int fd;
	MPI_File fh;
	char* filename;
	char* filename1;
	FILE* filestream;
	MPI_Datatype filetype;
	int flag;
	int flags;
	void* function;
	MPI_Group group;
	MPI_Group group1;
	MPI_Group group2;
	MPI_Group group_out;
	MPI_Handle_enum handle_kind;
	int high;
	void* inbuf;
	int incount;
	int index;
	MPI_Info info;
	MPI_Info info_used;
	int insize;
	int key;
	int keyval;
	int level;
	int local_leader;
	void* location;
	mode_t mode;
	char name;
	char namep;
	int ndims_p;
	int newfd;
	MPI_Info newinfo;
	int newrank;
	MPI_Datatype newtype;
	int nkeys;
	int nneighbors;
	int nnodes;
	int num_addresses;
	int num_datatypes;
	int num_integers;
	off_t offset;
	MPI_Datatype old_type;
	int oldfd;
	MPI_Op op;
	MPI_Op op_ptr;
	int order;
	void* outbuf;
	int outcount;
	char pathname;
	MPI_Comm peer_comm;
	int position;
	int* ranges;
	int rank;
	int* rdispls;
	void* recvbuf;
	int recvcount;
	int* recvcounts;
	int recvtag;
	MPI_Datatype recvtype;
	int remote_leader;
	int reorder;
	MPI_Request request;
	int reslen;
	int result;
	int* retcoords;
	int* retedges;
	int root;
	int* sdispls;
	int sendtag;
	int size;
	int source;
	MPI_Status status;
	int status_src;
	int* statuses_srcs;
	int stride;
	char string;
	int subversion;
	int tag;
	MPI_Aint* the_addresses;
	MPI_Datatype* the_datatypes;
	int top_type;
	char value;
	int valuelen;
	int version;
	int whence;
} umpi_mpi_param_t;

#endif


